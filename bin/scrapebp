#!/usr/bin/env node

"use strict";

var ScrapeBp = require('..');
var chalk = require('nomnom/node_modules/chalk');
var querystring = require('querystring');
var util = require('util');

var argv = require("nomnom")
  .script(require('../package.json').name)
  .option('url', {
    position: 0,
    help: "URL to scrape",
    list: false,
    required: true
  })
  .option('method', {
    abbr: 'm',
    default: 'GET',
    help: "HTTP method for request"
  })
  .option('form', {
    abbr: 'f',
    flag: true,
    default: false,
    help: "Form-encode request body"
  })
  .option('zip', {
    abbr: 'z',
    flag: true,
    default: false,
    help: "Accept gzipped response"
  })
  // .option('encoding', {
  //   abbr: 'e',
  //   help: "Encoding of the response content, default = auto detect"
  // })
  .option('dumpHeader', {
    abbr: 'H',
    flag: true,
    default: false,
    help: "Dump HTTP response header"
  })
  .option('dumpBody', {
    abbr: 'B',
    flag: true,
    default: false,
    help: "Dump HTTP response body"
  })
  // .option('verbose', {
  //   abbr: 'v',
  //   flag: true,
  //   default: false,
  //   help: "Print processing logs"
  // })
  .help(chalk.bold("Author: ") +
    chalk.underline("leesei@gmail.com") + "       "+
    chalk.bold("Licence: ") + "MIT\n")

  .parse();

var DemoScraper = {
  // scrape function
  // url: original url for scraping
  // $:   cheerio object for the parsed webpage
  // callbacl: callack function when done
  scrape : function(url, $, callback) {
    console.info("[%s] processing [%s] ...", this.name, url);

    // show off your cheerio-fu here
    callback(null, url, {
      'title': $('title').text(),
      'links': $('a').map(function(i, el) {
          return $(this).attr('href');
        }).toArray().slice(0, 10),
      'imgs': $('img').map(function(i, el) {
          return $(this).attr('src');
        }).toArray().slice(0, 10),
      'scripts': $('script').map(function(i, el) {
          return $(this).attr('src');
        }).toArray().slice(0, 10)
    });
  },
  name: "demo-scraper"
};

// console.log(argv);
// normalize argv
if (!/^https?:\/\//.test(argv.url)) {
  argv.url = 'http://' + argv.url;
}
argv.method = argv.method.toUpperCase();

var opts = {};
// url to scrape
opts.url = argv.url;
// [optional] HTTP method (default = 'GET')
opts.method = argv.method;
// [optional] custom header for request
opts.headers = {
  foo: "bar",
  "x-foo": "x-bar"
};
// [optional] body for request
// ScrapeBp will set the HTTP 'Content' header according to `formEncode`
// NOTE: server is not required to handle body of GET requests
// http://stackoverflow.com/questions/978061/http-get-with-request-body
opts.body = {
  foo: "bar",
  message: "dummy payload from scrapebp"
};
// [optional] apply form encoding to request body instead of JSON data (default = false)
opts.formEncode = argv.form;
// [optional] whether to accept gzipped response (default = false)
opts.useZip = argv.zip;
// [optional] encoding for response content (default = auto detect)
// opts.encoding = argv.encoding;
// [optional] number of redirects (default = 5)
opts.nRedirect = 10;
// [optional] cheerio option object
opts.cheerio_opts = null;

var scrapebp = ScrapeBp(opts);

scrapebp.on('headers', function (headers) {
  console.log("- %s headers ready", opts.method);
  if (argv.dumpHeader) {
    console.log(headers);
  }
});

scrapebp.on('redirect', function (url, remaining) {
  console.log("- redirects to: %s (%d remaining)", url, remaining);
});

scrapebp.on('error', function (err) {
  console.error(err);
});

scrapebp.on('response', function (resp) {
  console.log("- response ready");
});

scrapebp.on('$ready', function(url, $) {
  console.log("- $ ready");
  // $ is the cheerio object
  // use $.html() to get the response body
  // useful if the response is not html/xml

  if (argv.dumpBody) {
    console.log("body:");
    console.log($.html());
  }

  // invoke our scraper
  DemoScraper.scrape(url, $, scrapeCallback);
});

// callback function, parameters depends on scraper.scrape()
function scrapeCallback(err) {
    console.info();
    if (err) {
      console.error("scrape error:", err);
      return;
    }

    var args = Array.prototype.slice.call(arguments, 1);
    console.info("callback with %d args:", args.length);
    args.some(function (item, index) {
      console.info('#%d: %s', index, util.inspect(item));
    });
    console.info();
};
